package main

import "testing"

func TestPart1(t *testing.T) {
	combinations := map[string]int{
		"8A004A801A8002F478":             16,
		"620080001611562C8802118E34":     12,
		"C0015000016115A2E0802F182340":   23,
		"A0016C880162017C3686B18A3D4780": 31,
	}

	for transmission, expected := range combinations {
		mine := Part1(transmission)
		if mine != expected {
			t.Errorf("Transmission %s returned %d, but should be %d", transmission, mine, expected)
		}
	}
}

func TestPart2(t *testing.T) {
	combinations := map[string]int{
		"C200B40A82":                 3,
		"04005AC33890":               54,
		"880086C3E88112":             7,
		"CE00C43D881120":             9,
		"D8005AC2A8F0":               1,
		"F600BC2D8F":                 0,
		"9C005AC2F8F0":               0,
		"9C0141080250320F1802104A08": 1,
	}

	for transmission, expected := range combinations {
		mine := Part2(transmission)
		if mine != expected {
			t.Errorf("Transmission %s returned %d, but should be %d", transmission, mine, expected)
		}
	}
}



func TestHexToBinary(t *testing.T) {
	transmission := "0D2FE28"
	binary := HexToBinary(transmission)
	expected := []int{
		0b0000,
		0b1101,
		0b0010,
		0b1111,
		0b1110,
		0b0010,
		0b1000,
	}

	if len(binary) != len(expected) {
		t.Errorf("Should return %v, but returned %v", expected, binary)
		return
	}

	for i := 0; i < len(binary); i++ {
		if binary[i] != expected[i] {
			t.Errorf("Should return %v, but returned %v", expected, binary)
			return
		}
	}
}

func TestCombineEmpty(t *testing.T) {
	buffers := []int{}
	combined := Combine(buffers)
	expected := 0
	if combined != expected {
		t.Errorf("With empty list should return %d, but returned %d", expected, combined)
	}
}

func TestCombine(t *testing.T) {
	buffers := []int{
		0b0000,
		0b1101,
		0b1100,
		0b0001,
	}
	combined := Combine(buffers)
	expected := 0b0000110111000001
	if combined != expected {
		t.Errorf("Should return %d, but returned %d", expected, combined)
	}
}
